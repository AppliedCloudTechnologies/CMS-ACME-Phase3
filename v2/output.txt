# aws_cognito_user_pool.CognitoUserPool:
resource "aws_cognito_user_pool" "CognitoUserPool" {
    arn                       = "arn:aws:cognito-idp:us-east-1:656862533084:userpool/us-east-1_8DYkee7iU"
    auto_verified_attributes  = []
    creation_date             = "2022-08-08T18:36:40Z"
    endpoint                  = "cognito-idp.us-east-1.amazonaws.com/us-east-1_8DYkee7iU"
    estimated_number_of_users = 0
    id                        = "us-east-1_8DYkee7iU"
    last_modified_date        = "2022-08-08T18:36:40Z"
    mfa_configuration         = "OFF"
    name                      = "cms-acme-user-pool"
    tags                      = {}
    tags_all                  = {}

    admin_create_user_config {
        allow_admin_create_user_only = false
    }

    email_configuration {
        email_sending_account = "COGNITO_DEFAULT"
    }

    password_policy {
        minimum_length                   = 8
        require_lowercase                = true
        require_numbers                  = true
        require_symbols                  = true
        require_uppercase                = true
        temporary_password_validity_days = 7
    }

    verification_message_template {
        default_email_option = "CONFIRM_WITH_CODE"
    }
}

# aws_cognito_user_pool_client.CognitoUserPoolClient:
resource "aws_cognito_user_pool_client" "CognitoUserPoolClient" {
    access_token_validity                = 0
    allowed_oauth_flows                  = []
    allowed_oauth_flows_user_pool_client = false
    allowed_oauth_scopes                 = []
    callback_urls                        = []
    enable_token_revocation              = true
    explicit_auth_flows                  = [
        "ALLOW_ADMIN_USER_PASSWORD_AUTH",
        "ALLOW_REFRESH_TOKEN_AUTH",
        "ALLOW_USER_SRP_AUTH",
    ]
    id                                   = "1qmbajlcgr8m1eqs3349udocq5"
    id_token_validity                    = 0
    logout_urls                          = []
    name                                 = "cms-acme-app"
    read_attributes                      = []
    refresh_token_validity               = 30
    supported_identity_providers         = []
    user_pool_id                         = "us-east-1_8DYkee7iU"
    write_attributes                     = []
}

# aws_dynamodb_table.DynamoDBTable:
resource "aws_dynamodb_table" "DynamoDBTable" {
    arn            = "arn:aws:dynamodb:us-east-1:656862533084:table/patient_status"
    billing_mode   = "PROVISIONED"
    hash_key       = "pat_id"
    id             = "patient_status"
    name           = "patient_status"
    range_key      = "prov_nbr"
    read_capacity  = 1
    stream_enabled = false
    tags           = {}
    tags_all       = {}
    write_capacity = 1

    attribute {
        name = "pat_id"
        type = "S"
    }
    attribute {
        name = "prov_nbr"
        type = "S"
    }

    point_in_time_recovery {
        enabled = false
    }

    ttl {
        enabled = false
    }
}

# aws_dynamodb_table.DynamoDBTable2:
resource "aws_dynamodb_table" "DynamoDBTable2" {
    arn            = "arn:aws:dynamodb:us-east-1:656862533084:table/patient_status1"
    billing_mode   = "PROVISIONED"
    hash_key       = "pat_id"
    id             = "patient_status1"
    name           = "patient_status1"
    range_key      = "prov_nbr"
    read_capacity  = 1
    stream_enabled = false
    tags           = {}
    tags_all       = {}
    write_capacity = 1

    attribute {
        name = "pat_id"
        type = "S"
    }
    attribute {
        name = "prov_nbr"
        type = "S"
    }

    point_in_time_recovery {
        enabled = false
    }

    ttl {
        enabled = false
    }
}

# aws_dynamodb_table.DynamoDBTable3:
resource "aws_dynamodb_table" "DynamoDBTable3" {
    arn            = "arn:aws:dynamodb:us-east-1:656862533084:table/patient_admit_out"
    billing_mode   = "PROVISIONED"
    hash_key       = "uuid"
    id             = "patient_admit_out"
    name           = "patient_admit_out"
    read_capacity  = 1
    stream_enabled = false
    tags           = {}
    tags_all       = {}
    write_capacity = 1

    attribute {
        name = "pat_id"
        type = "S"
    }
    attribute {
        name = "prov_nbr"
        type = "S"
    }
    attribute {
        name = "uuid"
        type = "S"
    }

    global_secondary_index {
        hash_key           = "pat_id"
        name               = "pat_id"
        non_key_attributes = []
        projection_type    = "ALL"
        range_key          = "prov_nbr"
        read_capacity      = 1
        write_capacity     = 1
    }

    point_in_time_recovery {
        enabled = false
    }

    ttl {
        enabled = false
    }
}

# aws_dynamodb_table.DynamoDBTable4:
resource "aws_dynamodb_table" "DynamoDBTable4" {
    arn            = "arn:aws:dynamodb:us-east-1:656862533084:table/patient_admit_out1"
    billing_mode   = "PROVISIONED"
    hash_key       = "uuid"
    id             = "patient_admit_out1"
    name           = "patient_admit_out1"
    read_capacity  = 1
    stream_enabled = false
    tags           = {}
    tags_all       = {}
    write_capacity = 1

    attribute {
        name = "pat_id"
        type = "S"
    }
    attribute {
        name = "prov_nbr"
        type = "S"
    }
    attribute {
        name = "uuid"
        type = "S"
    }

    global_secondary_index {
        hash_key           = "pat_id"
        name               = "pat_id"
        non_key_attributes = []
        projection_type    = "ALL"
        range_key          = "prov_nbr"
        read_capacity      = 1
        write_capacity     = 1
    }

    point_in_time_recovery {
        enabled = false
    }

    ttl {
        enabled = false
    }
}

# aws_ecr_repository.ECRRepository:
resource "aws_ecr_repository" "ECRRepository" {
    arn                  = "arn:aws:ecr:us-east-1:656862533084:repository/cms-acme"
    id                   = "cms-acme"
    image_tag_mutability = "MUTABLE"
    name                 = "cms-acme"
    registry_id          = "656862533084"
    repository_url       = "656862533084.dkr.ecr.us-east-1.amazonaws.com/cms-acme"
    tags                 = {}
    tags_all             = {}

    encryption_configuration {
        encryption_type = "AES256"
    }

    image_scanning_configuration {
        scan_on_push = false
    }
}

# aws_ecs_cluster.ECSCluster:
resource "aws_ecs_cluster" "ECSCluster" {
    arn                = "arn:aws:ecs:us-east-1:656862533084:cluster/cms-acme-project"
    capacity_providers = []
    id                 = "arn:aws:ecs:us-east-1:656862533084:cluster/cms-acme-project"
    name               = "cms-acme-project"
    tags               = {}
    tags_all           = {}

    setting {
        name  = "containerInsights"
        value = "disabled"
    }
}

# aws_ecs_service.ECSService:
resource "aws_ecs_service" "ECSService" {
    cluster                            = "arn:aws:ecs:us-east-1:656862533084:cluster/cms-acme-project"
    deployment_maximum_percent         = 200
    deployment_minimum_healthy_percent = 100
    desired_count                      = 2
    enable_ecs_managed_tags            = true
    enable_execute_command             = false
    health_check_grace_period_seconds  = 0
    iam_role                           = "aws-service-role"
    id                                 = "arn:aws:ecs:us-east-1:656862533084:service/cms-acme-project/cms-amce-fargate-service"
    launch_type                        = "FARGATE"
    name                               = "cms-amce-fargate-service"
    platform_version                   = "LATEST"
    propagate_tags                     = "NONE"
    scheduling_strategy                = "REPLICA"
    tags                               = {}
    tags_all                           = {}
    task_definition                    = "arn:aws:ecs:us-east-1:656862533084:task-definition/task-def-cms-api:9"
    wait_for_steady_state              = false

    deployment_circuit_breaker {
        enable   = false
        rollback = false
    }

    deployment_controller {
        type = "ECS"
    }

    load_balancer {
        container_name   = "container-cms-api"
        container_port   = 8081
        target_group_arn = "arn:aws:elasticloadbalancing:us-east-1:656862533084:targetgroup/cms-amce-tg-port/1d057bcd142e862f"
    }

    network_configuration {
        assign_public_ip = true
        security_groups  = [
            "sg-04b247f7af42145fb",
        ]
        subnets          = [
            "subnet-06bcab37cd885c165",
            "subnet-0e47da08166802da0",
        ]
    }
}

# aws_ecs_task_definition.ECSTaskDefinition:
resource "aws_ecs_task_definition" "ECSTaskDefinition" {
    arn                      = "arn:aws:ecs:us-east-1:656862533084:task-definition/task-def-cms-api:9"
    container_definitions    = jsonencode(
        [
            {
                cpu              = 0
                environment      = []
                essential        = true
                image            = "656862533084.dkr.ecr.us-east-1.amazonaws.com/cms-acme:v1"
                logConfiguration = {
                    logDriver = "awslogs"
                    options   = {
                        awslogs-group         = "/ecs/task-def-cms-api"
                        awslogs-region        = "us-east-1"
                        awslogs-stream-prefix = "ecs"
                    }
                }
                mountPoints      = []
                name             = "container-cms-api"
                portMappings     = [
                    {
                        containerPort = 8081
                        hostPort      = 8081
                        protocol      = "tcp"
                    },
                ]
                volumesFrom      = []
            },
        ]
    )
    cpu                      = "512"
    execution_role_arn       = "arn:aws:iam::656862533084:role/ecsTaskExecutionRole"
    family                   = "task-def-cms-api"
    id                       = "task-def-cms-api"
    memory                   = "1024"
    network_mode             = "awsvpc"
    requires_compatibilities = [
        "FARGATE",
    ]
    revision                 = 9
    skip_destroy             = false
    tags                     = {}
    tags_all                 = {}
}

# aws_iam_role.IAMRole:
resource "aws_iam_role" "IAMRole" {
    arn                   = "arn:aws:iam::656862533084:role/ecsTaskExecutionRole"
    assume_role_policy    = jsonencode(
        {
            Statement = [
                {
                    Action    = "sts:AssumeRole"
                    Effect    = "Allow"
                    Principal = {
                        Service = "ecs-tasks.amazonaws.com"
                    }
                    Sid       = ""
                },
            ]
            Version   = "2008-10-17"
        }
    )
    create_date           = "2022-08-08T18:36:39Z"
    force_detach_policies = false
    id                    = "ecsTaskExecutionRole"
    managed_policy_arns   = [
        "arn:aws:iam::aws:policy/AdministratorAccess",
    ]
    max_session_duration  = 3600
    name                  = "ecsTaskExecutionRole"
    path                  = "/"
    tags                  = {}
    tags_all              = {}
    unique_id             = "AROAZR4AO2XOIPCF3BPXZ"

    inline_policy {}
}

# aws_internet_gateway.EC2InternetGateway:
resource "aws_internet_gateway" "EC2InternetGateway" {
    arn      = "arn:aws:ec2:us-east-1:656862533084:internet-gateway/igw-06dda25c0edc7c472"
    id       = "igw-06dda25c0edc7c472"
    owner_id = "656862533084"
    tags     = {}
    tags_all = {}
    vpc_id   = "vpc-06a0c063501a74cff"
}

# aws_lb.ElasticLoadBalancingV2LoadBalancer:
resource "aws_lb" "ElasticLoadBalancingV2LoadBalancer" {
    arn                        = "arn:aws:elasticloadbalancing:us-east-1:656862533084:loadbalancer/app/alb-cms-service/c662be9159e85ebd"
    arn_suffix                 = "app/alb-cms-service/c662be9159e85ebd"
    desync_mitigation_mode     = "defensive"
    dns_name                   = "alb-cms-service-1552905223.us-east-1.elb.amazonaws.com"
    drop_invalid_header_fields = false
    enable_deletion_protection = false
    enable_http2               = true
    enable_waf_fail_open       = false
    id                         = "arn:aws:elasticloadbalancing:us-east-1:656862533084:loadbalancer/app/alb-cms-service/c662be9159e85ebd"
    idle_timeout               = 60
    internal                   = false
    ip_address_type            = "ipv4"
    load_balancer_type         = "application"
    name                       = "alb-cms-service"
    security_groups            = [
        "sg-04b247f7af42145fb",
    ]
    subnets                    = [
        "subnet-06bcab37cd885c165",
        "subnet-0e47da08166802da0",
    ]
    tags                       = {}
    tags_all                   = {}
    vpc_id                     = "vpc-06a0c063501a74cff"
    zone_id                    = "Z35SXDOTRQ7X7K"

    access_logs {
        enabled = false
    }

    subnet_mapping {
        subnet_id = "subnet-06bcab37cd885c165"
    }
    subnet_mapping {
        subnet_id = "subnet-0e47da08166802da0"
    }
}

# aws_lb_listener.ElasticLoadBalancingV2Listener:
resource "aws_lb_listener" "ElasticLoadBalancingV2Listener" {
    arn               = "arn:aws:elasticloadbalancing:us-east-1:656862533084:listener/app/alb-cms-service/c662be9159e85ebd/3f138ebd4e98b308"
    id                = "arn:aws:elasticloadbalancing:us-east-1:656862533084:listener/app/alb-cms-service/c662be9159e85ebd/3f138ebd4e98b308"
    load_balancer_arn = "arn:aws:elasticloadbalancing:us-east-1:656862533084:loadbalancer/app/alb-cms-service/c662be9159e85ebd"
    port              = 80
    protocol          = "HTTP"
    tags              = {}
    tags_all          = {}

    default_action {
        order            = 1
        target_group_arn = "arn:aws:elasticloadbalancing:us-east-1:656862533084:targetgroup/cms-amce-tg-port/1d057bcd142e862f"
        type             = "forward"
    }
}

# aws_lb_target_group.ElasticLoadBalancingV2TargetGroup:
resource "aws_lb_target_group" "ElasticLoadBalancingV2TargetGroup" {
    arn                                = "arn:aws:elasticloadbalancing:us-east-1:656862533084:targetgroup/temp-cms-target-group/4b7225548ae5af0f"
    arn_suffix                         = "targetgroup/temp-cms-target-group/4b7225548ae5af0f"
    connection_termination             = false
    deregistration_delay               = "300"
    id                                 = "arn:aws:elasticloadbalancing:us-east-1:656862533084:targetgroup/temp-cms-target-group/4b7225548ae5af0f"
    lambda_multi_value_headers_enabled = false
    load_balancing_algorithm_type      = "round_robin"
    name                               = "temp-cms-target-group"
    port                               = 80
    protocol                           = "HTTP"
    protocol_version                   = "HTTP1"
    proxy_protocol_v2                  = false
    slow_start                         = 0
    tags                               = {}
    tags_all                           = {}
    target_type                        = "instance"
    vpc_id                             = "vpc-06a0c063501a74cff"

    health_check {
        enabled             = true
        healthy_threshold   = 5
        interval            = 30
        matcher             = "200"
        path                = "/"
        port                = "traffic-port"
        protocol            = "HTTP"
        timeout             = 5
        unhealthy_threshold = 2
    }

    stickiness {
        cookie_duration = 86400
        enabled         = false
        type            = "lb_cookie"
    }
}

# aws_lb_target_group.ElasticLoadBalancingV2TargetGroup2:
resource "aws_lb_target_group" "ElasticLoadBalancingV2TargetGroup2" {
    arn                                = "arn:aws:elasticloadbalancing:us-east-1:656862533084:targetgroup/ecs-cms-ac-cmsacmeservice/ecceafea75d6f501"
    arn_suffix                         = "targetgroup/ecs-cms-ac-cmsacmeservice/ecceafea75d6f501"
    connection_termination             = false
    deregistration_delay               = "300"
    id                                 = "arn:aws:elasticloadbalancing:us-east-1:656862533084:targetgroup/ecs-cms-ac-cmsacmeservice/ecceafea75d6f501"
    lambda_multi_value_headers_enabled = false
    load_balancing_algorithm_type      = "round_robin"
    name                               = "ecs-cms-ac-cmsacmeservice"
    port                               = 80
    protocol                           = "HTTP"
    protocol_version                   = "HTTP1"
    proxy_protocol_v2                  = false
    slow_start                         = 0
    tags                               = {}
    tags_all                           = {}
    target_type                        = "ip"
    vpc_id                             = "vpc-06a0c063501a74cff"

    health_check {
        enabled             = true
        healthy_threshold   = 5
        interval            = 30
        matcher             = "200"
        path                = "/info/status"
        port                = "traffic-port"
        protocol            = "HTTP"
        timeout             = 5
        unhealthy_threshold = 2
    }

    stickiness {
        cookie_duration = 86400
        enabled         = false
        type            = "lb_cookie"
    }
}

# aws_lb_target_group.ElasticLoadBalancingV2TargetGroup3:
resource "aws_lb_target_group" "ElasticLoadBalancingV2TargetGroup3" {
    arn                                = "arn:aws:elasticloadbalancing:us-east-1:656862533084:targetgroup/ecs-cms-ac-cms-acme-service/004ebd9a6e87fae0"
    arn_suffix                         = "targetgroup/ecs-cms-ac-cms-acme-service/004ebd9a6e87fae0"
    connection_termination             = false
    deregistration_delay               = "300"
    id                                 = "arn:aws:elasticloadbalancing:us-east-1:656862533084:targetgroup/ecs-cms-ac-cms-acme-service/004ebd9a6e87fae0"
    lambda_multi_value_headers_enabled = false
    load_balancing_algorithm_type      = "round_robin"
    name                               = "ecs-cms-ac-cms-acme-service"
    port                               = 80
    protocol                           = "HTTP"
    protocol_version                   = "HTTP1"
    proxy_protocol_v2                  = false
    slow_start                         = 0
    tags                               = {}
    tags_all                           = {}
    target_type                        = "ip"
    vpc_id                             = "vpc-06a0c063501a74cff"

    health_check {
        enabled             = true
        healthy_threshold   = 5
        interval            = 30
        matcher             = "200"
        path                = "/info/status"
        port                = "traffic-port"
        protocol            = "HTTP"
        timeout             = 5
        unhealthy_threshold = 2
    }

    stickiness {
        cookie_duration = 86400
        enabled         = false
        type            = "lb_cookie"
    }
}

# aws_lb_target_group.ElasticLoadBalancingV2TargetGroup4:
resource "aws_lb_target_group" "ElasticLoadBalancingV2TargetGroup4" {
    arn                                = "arn:aws:elasticloadbalancing:us-east-1:656862533084:targetgroup/cms-amce-tg-port/1d057bcd142e862f"
    arn_suffix                         = "targetgroup/cms-amce-tg-port/1d057bcd142e862f"
    connection_termination             = false
    deregistration_delay               = "300"
    id                                 = "arn:aws:elasticloadbalancing:us-east-1:656862533084:targetgroup/cms-amce-tg-port/1d057bcd142e862f"
    lambda_multi_value_headers_enabled = false
    load_balancing_algorithm_type      = "round_robin"
    name                               = "cms-amce-tg-port"
    port                               = 80
    protocol                           = "HTTP"
    protocol_version                   = "HTTP1"
    proxy_protocol_v2                  = false
    slow_start                         = 0
    tags                               = {}
    tags_all                           = {}
    target_type                        = "ip"
    vpc_id                             = "vpc-06a0c063501a74cff"

    health_check {
        enabled             = true
        healthy_threshold   = 5
        interval            = 30
        matcher             = "200"
        path                = "/info/status"
        port                = "traffic-port"
        protocol            = "HTTP"
        timeout             = 5
        unhealthy_threshold = 2
    }

    stickiness {
        cookie_duration = 86400
        enabled         = false
        type            = "lb_cookie"
    }
}

# aws_security_group.temp_sg:
resource "aws_security_group" "temp_sg" {
    arn                    = "arn:aws:ec2:us-east-1:656862533084:security-group/sg-04b247f7af42145fb"
    description            = "temp_sg"
    egress                 = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = ""
            from_port        = 0
            ipv6_cidr_blocks = [
                "::/0",
            ]
            prefix_list_ids  = []
            protocol         = "-1"
            security_groups  = []
            self             = false
            to_port          = 0
        },
    ]
    id                     = "sg-04b247f7af42145fb"
    ingress                = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = "temp_sg"
            from_port        = 0
            ipv6_cidr_blocks = [
                "::/0",
            ]
            prefix_list_ids  = []
            protocol         = "-1"
            security_groups  = []
            self             = false
            to_port          = 0
        },
    ]
    name                   = "temp_sg"
    owner_id               = "656862533084"
    revoke_rules_on_delete = false
    tags                   = {
        "Name" = "allow_tls"
    }
    tags_all               = {
        "Name" = "allow_tls"
    }
    vpc_id                 = "vpc-06a0c063501a74cff"
}

# aws_subnet.EC2Subnet:
resource "aws_subnet" "EC2Subnet" {
    arn                                            = "arn:aws:ec2:us-east-1:656862533084:subnet/subnet-0e47da08166802da0"
    assign_ipv6_address_on_creation                = false
    availability_zone                              = "us-east-1a"
    availability_zone_id                           = "use1-az6"
    cidr_block                                     = "10.0.0.0/24"
    enable_dns64                                   = false
    enable_resource_name_dns_a_record_on_launch    = false
    enable_resource_name_dns_aaaa_record_on_launch = false
    id                                             = "subnet-0e47da08166802da0"
    ipv6_native                                    = false
    map_customer_owned_ip_on_launch                = false
    map_public_ip_on_launch                        = false
    owner_id                                       = "656862533084"
    private_dns_hostname_type_on_launch            = "ip-name"
    tags                                           = {}
    tags_all                                       = {}
    vpc_id                                         = "vpc-06a0c063501a74cff"
}

# aws_subnet.EC2Subnet2:
resource "aws_subnet" "EC2Subnet2" {
    arn                                            = "arn:aws:ec2:us-east-1:656862533084:subnet/subnet-06bcab37cd885c165"
    assign_ipv6_address_on_creation                = false
    availability_zone                              = "us-east-1b"
    availability_zone_id                           = "use1-az1"
    cidr_block                                     = "10.0.1.0/24"
    enable_dns64                                   = false
    enable_resource_name_dns_a_record_on_launch    = false
    enable_resource_name_dns_aaaa_record_on_launch = false
    id                                             = "subnet-06bcab37cd885c165"
    ipv6_native                                    = false
    map_customer_owned_ip_on_launch                = false
    map_public_ip_on_launch                        = false
    owner_id                                       = "656862533084"
    private_dns_hostname_type_on_launch            = "ip-name"
    tags                                           = {}
    tags_all                                       = {}
    vpc_id                                         = "vpc-06a0c063501a74cff"
}

# aws_vpc.EC2VPC:
resource "aws_vpc" "EC2VPC" {
    arn                              = "arn:aws:ec2:us-east-1:656862533084:vpc/vpc-06a0c063501a74cff"
    assign_generated_ipv6_cidr_block = false
    cidr_block                       = "10.0.0.0/16"
    default_network_acl_id           = "acl-0dcac0ba5bc427160"
    default_route_table_id           = "rtb-0a3fd547d42a46418"
    default_security_group_id        = "sg-07041370efa764c0b"
    dhcp_options_id                  = "dopt-0883a5791a776c23f"
    enable_classiclink               = false
    enable_classiclink_dns_support   = false
    enable_dns_hostnames             = true
    enable_dns_support               = true
    id                               = "vpc-06a0c063501a74cff"
    instance_tenancy                 = "default"
    ipv6_netmask_length              = 0
    main_route_table_id              = "rtb-0a3fd547d42a46418"
    owner_id                         = "656862533084"
    tags                             = {}
    tags_all                         = {}
}
